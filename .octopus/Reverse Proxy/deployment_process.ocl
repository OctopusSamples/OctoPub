step "Create Bucket" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Production", "Development"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormation.ReverseProxyBucket}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Resources": {
                    "LambdaS3Bucket": {
                      "Type": "AWS::S3::Bucket"
                    }
                  },
                  "Outputs" : {
                    "LambdaS3Bucket" : {
                      "Description" : "The S3 Bucket",
                      "Value" : {"Ref": "LambdaS3Bucket"}
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Upload Lambda" {

    action {
        action_type = "Octopus.AwsUploadS3"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.S3.BucketName = "#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"\",\"bucketKeyBehaviour\":\"Filename\",\"bucketKeyPrefix\":\"\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"private\",\"metadata\":[],\"tags\":[]}"
            Octopus.Action.Aws.S3.TargetMode = "EntirePackage"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopub"
            Octopus.Action.Package.PackageId = "com.octopus.octopub:reverse-proxy"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"

        packages {
            acquisition_location = "Server"
            feed = "Octopub"
            package_id = "com.octopus.octopub:reverse-proxy"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Get Stack Outputs" {

    action {
        action_type = "Octopus.AwsRunScript"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                PIPELINE_RESOURCE_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='Api'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "Api" ${PIPELINE_RESOURCE_ID}
                
                PIPELINE_HEALTH_RESOURCE_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='Health'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "Health" ${PIPELINE_HEALTH_RESOURCE_ID}
                
                REST_API=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='RestApi'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "RestApi" ${REST_API}
                
                TIMESTAMP=$(date '+%Y%m%d%H%M%S')
                
                set_octopusvariable "DeploymentId" ${TIMESTAMP}
                
                PRERELEASE="#{Octopus.Action[Upload Lambda].Package[].PackageVersion | VersionPreRelease}"
                echo "PRERELEASE: ${PRERELEASE}"
                if [[ -z ${PRERELEASE} ]]; then
                	set_octopusvariable "PreReleaseSuffix" ""
                else
                	set_octopusvariable "PreReleaseSuffix" "-${PRERELEASE}"	
                fi
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        container {
            feed = "Dockerhub"
            image = "octopusdeploy/worker-tools:3.2.0-ubuntu.18.04"
        }
    }
}

step "Deploy Lambda" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        environments = ["Development", "Production"]
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormation.ReverseProxy}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                	"Parameters": {
                		"EnvironmentName": {
                			"Type": "String",
                			"Default": "#{Octopus.Environment.Name}"
                		},
                      	"RestApi": {
                			"Type": "String"
                		},
                		"LambdaS3Key": {
                			"Type": "String"
                		},
                		"LambdaS3Bucket": {
                			"Type": "String"
                		},
                		"LambdaName": {
                			"Type": "String"
                		},
                		"LambdaDescription": {
                			"Type": "String"
                		},
                		"Suffix": {
                			"Type": "String"
                		}
                	},
                	"Resources": {
                		"AppLogGroupOne": {
                			"Type": "AWS::Logs::LogGroup",
                			"Properties": {
                				"LogGroupName": {
                					"Fn::Sub": "/aws/lambda/${EnvironmentName}-${LambdaName}"
                				}
                			}
                		},
                		"IamRoleLambdaHttpExecution": {
                			"Type": "AWS::IAM::Role",
                			"Properties": {
                				"AssumeRolePolicyDocument": {
                					"Version": "2012-10-17",
                					"Statement": [{
                						"Effect": "Allow",
                						"Principal": {
                							"Service": [
                								"lambda.amazonaws.com"
                							]
                						},
                						"Action": [
                							"sts:AssumeRole"
                						]
                					}]
                				},
                				"ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"],
                				"Policies": [{
                					"PolicyName": {
                						"Fn::Sub": "${EnvironmentName}-${LambdaName}-Web-policy"
                					},
                					"PolicyDocument": {
                						"Version": "2012-10-17",
                						"Statement": [{
                							"Effect": "Allow",
                							"Action": [
                								"logs:CreateLogStream",
                								"logs:CreateLogGroup",
                								"logs:PutLogEvents"
                							],
                							"Resource": [{
                								"Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${EnvironmentName}-${LambdaName}*:*"
                							}]
                						}]
                					}
                				}],
                				"Path": "/",
                				"RoleName": {
                					"Fn::Sub": "${EnvironmentName}-${LambdaName}-Web-role"
                				}
                			}
                		},
                		"LambdaHttp": {
                			"Type": "AWS::Lambda::Function",
                			"Properties": {
                				"Code": {
                					"S3Bucket": {
                						"Ref": "LambdaS3Bucket"
                					},
                					"S3Key": {
                						"Ref": "LambdaS3Key"
                					}
                				},
                				"Description": {
                					"Ref": "LambdaDescription"
                				},
                				"FunctionName": {
                					"Fn::Sub": "${EnvironmentName}-Web-${LambdaName}"
                				},
                				"Handler": "lambdahandler",
                				"MemorySize": 256,
                				"PackageType": "Zip",
                				"Role": {
                					"Fn::GetAtt": [
                						"IamRoleLambdaHttpExecution",
                						"Arn"
                					]
                				},
                				"Runtime": "go1.x",
                				"Timeout": 30
                			}
                		},
                		"LambdaVersion#{DeploymentId}": {
                			"Type": "AWS::Lambda::Version",
                			"Properties": {
                				"FunctionName": {
                					"Ref": "LambdaHttp"
                				},
                				"Description": {
                					"Ref": "LambdaDescription"
                				},
                				"ProvisionedConcurrencyConfig": {
                					"ProvisionedConcurrentExecutions": 20
                				}
                			}
                		},
                		"LambdaHttpPermissions": {
                			"Type": "AWS::Lambda::Permission",
                			"Properties": {
                				"FunctionName": {"Ref": "LambdaVersion#{DeploymentId}"},
                				"Action": "lambda:InvokeFunction",
                				"Principal": "apigateway.amazonaws.com",
                				"SourceArn": {
                					"Fn::Join": [
                						"",
                						[
                							"arn:",
                							{
                								"Ref": "AWS::Partition"
                							},
                							":execute-api:",
                							{
                								"Ref": "AWS::Region"
                							},
                							":",
                							{
                								"Ref": "AWS::AccountId"
                							},
                							":",
                							{
                								"Ref": "RestApi"
                							},
                							"/*/*"
                						]
                					]
                				}
                			}
                		}
                	},
                	"Outputs": {
                		"LambdaVersion": {
                			"Description": "The Lambda Version",
                			"Value": {
                				"Ref": "LambdaVersion#{DeploymentId}"
                			}
                		}
                	}
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"LambdaName\",\"ParameterValue\":\"#{Lambda.ReverseProxy}\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"v#{Octopus.Action[Upload Lambda].Package[].PackageVersion}-#{Octopus.Deployment.Id}\"},{\"ParameterKey\":\"Suffix\",\"ParameterValue\":\"#{Suffix}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"LambdaName\",\"ParameterValue\":\"#{Lambda.ReverseProxy}\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"v#{Octopus.Action[Upload Lambda].Package[].PackageVersion}-#{Octopus.Deployment.Id}\"},{\"ParameterKey\":\"Suffix\",\"ParameterValue\":\"#{Suffix}\"}]"
            Octopus.Action.Aws.IamCapabilities = "[\"CAPABILITY_NAMED_IAM\"]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Check for vulnerabilities" {

    action {
        action_type = "Octopus.Script"
        environments = ["Development (Security)", "Production (Security)"]
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                cd reverse-proxy-sbom
                SUCCESS=0
                for x in **/bom.xml; do 
                	docker run --rm -v "$PWD:/app" appthreat/dep-scan scan --bom "/app/$x" --type bom 2>&1
                    if [[ $? -ne 0 ]]; then
                    	SUCCESS=1
                    fi
                done
                
                set_octopusvariable "VerificationResult" $SUCCESS
                
                exit 0
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool_variable = "WorkerPool"

        packages "reverse-proxy-sbom" {
            acquisition_location = "Server"
            feed = "Octopub"
            package_id = "com.octopus.octopub:reverse-proxy-sbom"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "Send Notification" {
    condition = "Variable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Action[Check for vulnerabilities].Output.VerificationResult != \"0\"}True#{/if}"
    }

    action {
        environments = ["Development (Security)", "Production (Security)"]
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-441"
            Octopus.Action.Template.Version = "1"
            ssn_Color = "danger"
            ssn_HookUrl = "#{Slack.Hook}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "Open #{Octopus.Web.ServerUri}#{Octopus.Web.DeploymentLink} to review the logs."
            ssn_Title = "Vulnerabilities found in Products Service"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool_variable = "WorkerPool"
    }
}