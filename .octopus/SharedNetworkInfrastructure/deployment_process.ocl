step "Create API Gateway" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormation.ApiGateway}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  	"Parameters" : {
                    	"EnvironmentName" : {
                    		"Type" : "String",
                    		"Default" : "#{Octopus.Environment.Name}"
                    	}
                    },
                	"Resources": {
                		"ApiKey": {
                		  "Type" : "AWS::ApiGateway::ApiKey",
                		  "Properties" : {
                			  "Description" : "Write access key",
                			  "Enabled" : true,
                			  "Name" : "Write Access",
                			  "StageKey": [
                			  {
                				  "RestApiId" : {"Ref": "RestApi"},
                				  "StageName" : {"Ref": "EnvironmentName"}
                				}
                			  ]
                			}
                		},
                		"RestApi": {
                			"Type": "AWS::ApiGateway::RestApi",
                			"Properties": {
                				"Description": "My API Gateway",
                				"Name": "Octopub Pipeline API",
                                "BinaryMediaTypes": ["*/*"],
                				"EndpointConfiguration": {
                					"Types": [
                						"REGIONAL"
                					]
                				},
                				"ApiKeySourceType": "HEADER"
                			}
                		},
                		"Catchall": {
                			"Type": "AWS::ApiGateway::Resource",
                			"Properties": {
                				"RestApiId": {
                					"Ref": "RestApi"
                				},
                				"ParentId": {
                					"Fn::GetAtt": ["RestApi", "RootResourceId"]
                				},
                				"PathPart": "{proxy+}"
                			}
                		},
                		"Api": {
                			"Type": "AWS::ApiGateway::Resource",
                			"Properties": {
                				"RestApiId": {
                					"Ref": "RestApi"
                				},
                				"ParentId": {
                					"Fn::GetAtt": ["RestApi", "RootResourceId"]
                				},
                				"PathPart": "api"
                			}
                		},
                		"Web": {
                			"Type": "AWS::ApiGateway::Resource",
                			"Properties": {
                				"RestApiId": {
                					"Ref": "RestApi"
                				},
                				"ParentId": {
                					"Fn::GetAtt": ["RestApi", "RootResourceId"]
                				},
                				"PathPart": "web"
                			}
                		},
                        "Health": {
                			"Type": "AWS::ApiGateway::Resource",
                			"Properties": {
                				"RestApiId": {
                					"Ref": "RestApi"
                				},
                				"ParentId": {
                					"Fn::GetAtt": ["RestApi", "RootResourceId"]
                				},
                				"PathPart": "health"
                			}
                		}
                	},
                	"Outputs": {
                		"RestApi": {
                			"Description": "The REST API",
                			"Value": {
                				"Ref": "RestApi"
                			}
                		},
                		"RootResourceId": {
                			"Description": "ID of the root resource",
                			"Value": {
                				"Fn::GetAtt": ["RestApi", "RootResourceId"]
                			}
                		},
                		"Web": {
                			"Description": "ID of the resource the frontend",
                			"Value": {
                				"Ref": "Web"
                			}
                		},
                		"Health": {
                			"Description": "ID of the resource exposing health checks",
                			"Value": {
                				"Ref": "Health"
                			}
                		},
                		"Api": {
                			"Description": "ID of the resource exposing health checks",
                			"Value": {
                				"Ref": "Api"
                			}
                		}
                	}
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"}]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"
    }
}