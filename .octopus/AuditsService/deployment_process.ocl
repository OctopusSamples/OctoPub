step "Create Bucket" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormation.AuditsBucket}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Resources": {
                    "LambdaS3Bucket": {
                      "Type": "AWS::S3::Bucket"
                    }
                  },
                  "Outputs" : {
                    "LambdaS3Bucket" : {
                      "Description" : "The S3 Bucket",
                      "Value" : {"Ref": "LambdaS3Bucket"}
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Upload Lambda" {

    action {
        action_type = "Octopus.AwsUploadS3"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.S3.BucketName = "#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}"
            Octopus.Action.Aws.S3.PackageOptions = "{\"bucketKey\":\"\",\"bucketKeyBehaviour\":\"Filename\",\"bucketKeyPrefix\":\"\",\"storageClass\":\"STANDARD\",\"cannedAcl\":\"private\",\"metadata\":[],\"tags\":[]}"
            Octopus.Action.Aws.S3.TargetMode = "EntirePackage"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Octopub"
            Octopus.Action.Package.PackageId = "com.octopus.octopub:audits-service"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"

        packages {
            acquisition_location = "Server"
            feed = "Octopub"
            package_id = "com.octopus.octopub:audits-service"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "Get Stack Outputs" {

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                PIPELINE_RESOURCE_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='Api'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "Api" ${PIPELINE_RESOURCE_ID}
                
                PIPELINE_HEALTH_RESOURCE_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='Health'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "Health" ${PIPELINE_HEALTH_RESOURCE_ID}
                
                PIPELINE_MESSAGING_RESOURCE_ID=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='Messaging'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "Messaging" ${PIPELINE_MESSAGING_RESOURCE_ID}
                
                REST_API=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.ApiGateway} \
                    --query "Stacks[0].Outputs[?OutputKey=='RestApi'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "RestApi" ${REST_API}
                
                TIMESTAMP=$(date '+%Y%m%d%H%M%S')
                
                set_octopusvariable "DeploymentId" ${TIMESTAMP}
                
                PRERELEASE="#{Octopus.Action[Upload Lambda].Package[].PackageVersion | VersionPreRelease}"
                echo "PRERELEASE: ${PRERELEASE}"
                if [[ -z ${PRERELEASE} ]]; then
                	set_octopusvariable "PreReleaseSuffix" ""
                else
                	set_octopusvariable "PreReleaseSuffix" "-${PRERELEASE}"	
                fi
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        container {
            feed = "Dockerhub"
            image = "octopusdeploy/worker-tools:3.2.0-ubuntu.18.04"
        }
    }
}

step "Deploy Lambda" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormation.AuditsService}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Parameters" : {
                    "EnvironmentName" : {
                      "Type" : "String",
                      "Default" : "#{Octopus.Environment.Name}"
                    },
                    "RestApi" : {
                      "Type" : "String"
                    },
                    "ResourceId" : {
                      "Type" : "String"
                    },
                    "HealthResourceId" : {
                      "Type" : "String"
                    },
                    "MessageResourceId" : {
                      "Type" : "String"
                    },
                    "LambdaS3Key" : {
                      "Type" : "String"
                    },
                    "LambdaS3Bucket": {
                      "Type": "String"
                    },
                    "LambdaName": {
                      "Type": "String"
                    },
                    "LambdaDescription": {
                     	"Type": "String" 
                    },
                    "DBUsername": {
                     	"Type": "String" 
                    },
                    "DBPassword": {
                     	"Type": "String" 
                    },
                    "Path": {
                     	"Type": "String" 
                    },
                    "Suffix": {
                     	"Type": "String" 
                    }
                  },
                  "Resources": {
                    "VPC": {
                    	"Type": "AWS::EC2::VPC",
                    	"Properties": {
                    		"CidrBlock": "10.0.0.0/16",
                    		"EnableDnsSupport": true,
                    		"EnableDnsHostnames": true,
                    		"InstanceTenancy": "default",
                    		"Tags": [{
                    			"Key": "Name",
                    			"Value": "Products Microservice VPC"
                			}]
                		}
                	},
                	"InternetGateway": {
                    	"Type": "AWS::EC2::InternetGateway"
                	},
                	"VPCGatewayAttachment": {
                    	"Type": "AWS::EC2::VPCGatewayAttachment",
                    	"Properties": {
                    		"VpcId": {"Ref": "VPC"},
                    		"InternetGatewayId": {"Ref": "InternetGateway"}
                		}
                	},
                	"SubnetA": {
                    	"Type": "AWS::EC2::Subnet",
                    	"Properties": {
                    		"AvailabilityZone": "us-west-1a",
                    		"VpcId": {"Ref": "VPC"},
                    		"CidrBlock": "10.0.0.0/24",
                    		"MapPublicIpOnLaunch": true
                		}
                	},
                	"SubnetB": {
                    	"Type": "AWS::EC2::Subnet",
                    	"Properties": {
                    		"AvailabilityZone": "us-west-1b",
                    		"VpcId": {"Ref": "VPC"},
                    		"CidrBlock": "10.0.1.0/24",
                    		"MapPublicIpOnLaunch": true
                		}
                	},
                	"RouteTable": {
                    	"Type": "AWS::EC2::RouteTable",
                    	"Properties": {
                    		"VpcId": {"Ref": "VPC"}
                    	}
                    },
                    "InternetRoute": {
                    	"Type": "AWS::EC2::Route",
                    	"DependsOn": "InternetGateway",
                    	"Properties": {
                    		"DestinationCidrBlock": "0.0.0.0/0",
                    		"GatewayId": {"Ref": "InternetGateway"},
                    		"RouteTableId": {"Ref": "RouteTable"}
                		}
                	},
                	"SubnetARouteTableAssociation": {
                    	"Type": "AWS::EC2::SubnetRouteTableAssociation",
                    	"Properties": {
                    		"RouteTableId": {"Ref": "RouteTable"},
                    		"SubnetId": {"Ref": "SubnetA"}
                      }
                    },
                	"SubnetBRouteTableAssociation": {
                    	"Type": "AWS::EC2::SubnetRouteTableAssociation",
                    	"Properties": {
                    		"RouteTableId": {"Ref": "RouteTable"},
                    		"SubnetId": {"Ref": "SubnetB"}
                      }
                    },
                	"InstanceSecurityGroup": {
                		"Type": "AWS::EC2::SecurityGroup",
                		"Properties": {
                			"GroupName": "Octopus Target Group",
                			"GroupDescription": "RDS traffic",
                			"VpcId": {"Ref": "VPC"},
                			"SecurityGroupEgress": [{
                				"IpProtocol": "-1",
                				"CidrIp": "0.0.0.0/0"
                			}]
                		}
                	},
                	"InstanceSecurityGroupIngress": {
                      "Type": "AWS::EC2::SecurityGroupIngress",
                      "DependsOn": "InstanceSecurityGroup",
                      "Properties": {
                        "GroupId": { "Ref": "InstanceSecurityGroup" },
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": { "Ref": "InstanceSecurityGroup" }
                      }
                    },
                    "AppLogGroupOne": {
                      "Type": "AWS::Logs::LogGroup",
                      "Properties": {
                        "LogGroupName": { "Fn::Sub": "/aws/lambda/${EnvironmentName}-${LambdaName}" }
                      }
                    },
                    "IamRoleLambdaHttpExecution": {
                      "Type": "AWS::IAM::Role",
                      "Properties": {
                        "AssumeRolePolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Principal": {
                                "Service": [
                                  "lambda.amazonaws.com"
                                ]
                              },
                              "Action": [
                                "sts:AssumeRole"
                              ]
                            }
                          ]
                        },
                        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"],
                        "Policies": [
                          {
                            "PolicyName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}-Web-policy" },
                            "PolicyDocument": {
                              "Version": "2012-10-17",
                              "Statement": [
                                {
                                  "Effect": "Allow",
                                  "Action": [
                                    "logs:CreateLogStream",
                                    "logs:CreateLogGroup",
                                    "logs:PutLogEvents"
                                  ],
                                  "Resource": [
                                    {
                                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${EnvironmentName}-${LambdaName}*:*"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ],
                        "Path": "/",
                        "RoleName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}-Web-role" }
                      }
                    },
                    "IamRoleLambdaSqsExecution": {
                      "Type": "AWS::IAM::Role",
                      "Properties": {
                        "AssumeRolePolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Effect": "Allow",
                              "Principal": {
                                "Service": [
                                  "lambda.amazonaws.com"
                                ]
                              },
                              "Action": [
                                "sts:AssumeRole"
                              ]
                            }
                          ]
                        },
                        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"],
                        "Policies": [
                          {
                            "PolicyName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}-SQS-policy" },
                            "PolicyDocument": {
                              "Version": "2012-10-17",
                              "Statement": [
                                {
                                  "Effect": "Allow",
                                  "Action": [
                                    "sqs:ReceiveMessage",
                                    "sqs:DeleteMessage",
                                    "sqs:GetQueueAttributes",
                                    "sqs:ChangeMessageVisibility"
                                  ],
                                  "Resource": [
                                    {
                                      "Fn::GetAtt": ["AuditsQueue", "Arn"]
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ],
                        "Path": "/",
                        "RoleName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}-SQS-role" }
                      }
                    },
                    "LambdaHttp": {
                      "Type": "AWS::Lambda::Function",
                      "Properties": {
                        "Code": {
                          "S3Bucket": {"Ref": "LambdaS3Bucket"},
                          "S3Key": {"Ref": "LambdaS3Key"}       
                        },
                        "Environment": {
                          "Variables": {
                
                          }
                        },
                        "Description" : {"Ref": "LambdaDescription"},
                        "FunctionName": { "Fn::Sub": "${EnvironmentName}-Web-${LambdaName}" },
                        "Handler": "Audit.Service::Audit.Service.Lambda.Audits::AuditsApi",
                        "MemorySize": 128,
                        "PackageType": "Zip",
                        "Role": {
                          "Fn::GetAtt": [
                            "IamRoleLambdaHttpExecution",
                            "Arn"
                          ]
                        },
                        "Runtime": "dotnetcore3.1",
                        "Timeout": 30,
                        "VpcConfig": {
                        	"SecurityGroupIds" : [ {"Ref": "InstanceSecurityGroup"} ],
                			"SubnetIds" : [ {"Ref": "SubnetA"}, {"Ref": "SubnetB"} ]
                        }
                      }
                    },
                    "LambdaSqs": {
                      "Type": "AWS::Lambda::Function",
                      "Properties": {
                        "Code": {
                          "S3Bucket": {"Ref": "LambdaS3Bucket"},
                          "S3Key": {"Ref": "LambdaS3Key"}       
                        },
                        "Environment": {
                          "Variables": {
                
                          }
                        },
                        "Description" : {"Ref": "LambdaDescription"},
                        "FunctionName": { "Fn::Sub": "${EnvironmentName}-SQS-${LambdaName}" },
                        "Handler": "Audit.Service::Audit.Service.Lambda.Audits::HandleSqsEvent",
                        "MemorySize": 128,
                        "PackageType": "Zip",
                        "Role": {
                          "Fn::GetAtt": [
                            "IamRoleLambdaSqsExecution",
                            "Arn"
                          ]
                        },
                        "Runtime": "dotnetcore3.1",
                        "Timeout": 30,
                        "VpcConfig": {
                        	"SecurityGroupIds" : [ {"Ref": "InstanceSecurityGroup"} ],
                			"SubnetIds" : [ {"Ref": "SubnetA"}, {"Ref": "SubnetB"} ]
                        }
                      }
                    },
                    "LambdaVersion#{DeploymentId}": {
                     	"Type": "AWS::Lambda::Version",
                      	"Properties": {
                        	"FunctionName": {"Ref": "LambdaHttp"},
                          	"Description": {"Ref": "LambdaDescription"},
                          	"ProvisionedConcurrencyConfig": {
                            	"ProvisionedConcurrentExecutions": 1
                          	}
                        }
                    },
                    "LambdaHttpPermissions": {
                      "Type": "AWS::Lambda::Permission",
                      "Properties": {
                        "FunctionName": {
                          "Fn::GetAtt": [
                            "LambdaHttp",
                            "Arn"
                          ]
                        },
                        "Action": "lambda:InvokeFunction",
                        "Principal": "apigateway.amazonaws.com",
                        "SourceArn": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":execute-api:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              ":",
                              {"Ref": "RestApi"},
                              "/*/*"
                            ]
                          ]
                        }
                      }
                    },    
                	"ProductsResource": {
                		"Type": "AWS::ApiGateway::Resource",
                		"Properties": {
                			"RestApiId": {
                				"Ref": "RestApi"
                			},
                			"ParentId": {"Ref": "ResourceId"},
                			"PathPart": {"Ref": "Path"}
                		}
                	},
                    "ProductsHealthResource": {
                		"Type": "AWS::ApiGateway::Resource",
                		"Properties": {
                			"RestApiId": {
                				"Ref": "RestApi"
                			},
                			"ParentId": {"Ref": "HealthResourceId"},
                			"PathPart": {"Ref": "Path"}
                		}
                	},
                    "ProductsProxyResource": {
                		"Type": "AWS::ApiGateway::Resource",
                		"Properties": {
                			"RestApiId": {
                				"Ref": "RestApi"
                			},
                			"ParentId": {"Ref": "ProductsResource"},
                			"PathPart": "{proxy+}"
                		}
                	},
                    "ProductsHealthProxyResource": {
                		"Type": "AWS::ApiGateway::Resource",
                		"Properties": {
                			"RestApiId": {
                				"Ref": "RestApi"
                			},
                			"ParentId": {"Ref": "ProductsHealthResource"},
                			"PathPart": "{proxy+}"
                		}
                	},
                    "LambdaResourceMethodOne": {
                      "Type": "AWS::ApiGateway::Method",
                      "Properties": {      
                        "AuthorizationType": "NONE",  
                        "HttpMethod": "GET",
                        "Integration": {          
                          "IntegrationHttpMethod": "POST",          
                          "TimeoutInMillis": 20000,
                          "Type": "AWS_PROXY",
                          "Uri": {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                "arn:aws:lambda:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                ":function:",
                                { "Ref": "LambdaHttp" },
                                "/invocations"
                              ]
                            ]
                          }
                        },        
                        "ResourceId": {
                          "Ref": "ProductsResource"
                        },
                        "RestApiId": {"Ref": "RestApi"}
                      }
                    },
                    "LambdaResourceMethodTwo": {
                      "Type": "AWS::ApiGateway::Method",
                      "Properties": {      
                        "AuthorizationType": "NONE",  
                        "HttpMethod": "GET",
                        "Integration": {          
                          "IntegrationHttpMethod": "POST",          
                          "TimeoutInMillis": 20000,
                          "Type": "AWS_PROXY",
                          "Uri": {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                "arn:aws:lambda:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                ":function:",
                                { "Ref": "LambdaHttp" },
                                "/invocations"
                              ]
                            ]
                          }
                        },        
                        "ResourceId": {
                          "Ref": "ProductsProxyResource"
                        },
                        "RestApiId": {"Ref": "RestApi"}
                      }
                    },
                    "LambdaHealthResourceMethodOne": {
                      "Type": "AWS::ApiGateway::Method",
                      "Properties": {      
                        "AuthorizationType": "NONE",  
                        "HttpMethod": "GET",
                        "Integration": {          
                          "IntegrationHttpMethod": "POST",          
                          "TimeoutInMillis": 20000,
                          "Type": "AWS_PROXY",
                          "Uri": {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                "arn:aws:lambda:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                ":function:",
                                { "Ref": "LambdaHttp" },
                                "/invocations"
                              ]
                            ]
                          }
                        },        
                        "ResourceId": {
                          "Ref": "ProductsHealthResource"
                        },
                        "RestApiId": {"Ref": "RestApi"}
                      }
                    },
                    "LambdaHealthResourceMethodTwo": {
                      "Type": "AWS::ApiGateway::Method",
                      "Properties": {      
                        "AuthorizationType": "NONE",  
                        "HttpMethod": "GET",
                        "Integration": {          
                          "IntegrationHttpMethod": "POST",          
                          "TimeoutInMillis": 20000,
                          "Type": "AWS_PROXY",
                          "Uri": {
                            "Fn::Join": [
                              "",
                              [
                                "arn:",
                                {
                                  "Ref": "AWS::Partition"
                                },
                                ":apigateway:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                "arn:aws:lambda:",
                                {
                                  "Ref": "AWS::Region"
                                },
                                ":",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                ":function:",
                                { "Ref": "LambdaHttp" },
                                "/invocations"
                              ]
                            ]
                          }
                        },        
                        "ResourceId": {
                          "Ref": "ProductsHealthProxyResource"
                        },
                        "RestApiId": {"Ref": "RestApi"}
                      }
                    },
                    "Deployment#{DeploymentId}": {
                      "Type": "AWS::ApiGateway::Deployment",
                      "Properties": {
                        "RestApiId": {"Ref": "RestApi"}
                      },
                      "DependsOn": [
                        "LambdaResourceMethodOne",
                        "LambdaResourceMethodTwo",
                        "LambdaHealthResourceMethodOne",
                        "LambdaHealthResourceMethodTwo"
                      ]
                    },
                	"AuditsQueue": {
                		"Type" : "AWS::SQS::Queue",
                		"Properties": {
                			"QueueName": {"Fn::Join": ["", ["audits-", {"Ref": "EnvironmentName"}, {"Ref": "Suffix"}]]}
                		}
                	},
                	"LambdaFunctionEventSourceMapping": {
                		"Type": "AWS::Lambda::EventSourceMapping",
                		"Properties": {
                			"Enabled": true,
                			"BatchSize": 1,
                			"EventSourceArn": {
                				"Fn::GetAtt": ["AuditsQueue", "Arn"]
                			},
                			"FunctionName": {
                				"Fn::GetAtt": ["LambdaSqs", "Arn"]
                			}
                		}
                	},
                	"APIGatewayRole": {
                		"Type": "AWS::IAM::Role",
                		"Properties": {
                		  "AssumeRolePolicyDocument": {
                			"Statement": [
                			  {
                				"Action": [
                				  "sts:AssumeRole"
                				],
                				"Effect": "Allow",
                				"Principal": {
                				  "Service": [
                					"apigateway.amazonaws.com"
                				  ]
                				}
                			  }
                			],
                			"Version": "2012-10-17"
                		  },
                		  "Path": "/",
                		  "Policies": [
                			{
                				"PolicyName": "apig-sqs-send-msg-policy",
                			  "PolicyDocument": {			  	
                				"Statement": [
                				  {
                					"Action": "sqs:SendMessage",
                					"Effect": "Allow",
                					"Resource": "*"
                				  },
                				  {
                					"Action": [
                					  "logs:CreateLogGroup",
                					  "logs:CreateLogStream",
                					  "logs:PutLogEvents"
                					],
                					"Effect": "Allow",
                					"Resource": "*"
                				  }
                				],
                				"Version": "2012-10-17"
                			  }
                			}
                		  ],
                		  "RoleName": "apig-sqs-send-msg-role"
                		}		
                	},
                	"SqsProxyMethod": {
                		"Type": "AWS::ApiGateway::Method",
                		"Properties": {
                		  "AuthorizationType": "NONE",
                		  "ApiKeyRequired" : true,
                		  "HttpMethod": "POST",
                		  "RequestParameters": {
                		  	"method.request.header.accept": true
                		  },
                		  "Integration": {
                			"Credentials": {"Fn::GetAtt": ["APIGatewayRole", "Arn"]},
                			"IntegrationHttpMethod": "POST",
                			"IntegrationResponses": [
                			  {
                				"StatusCode": "200"
                			  }
                			],
                			"PassthroughBehavior": "NEVER",
                			"ContentHandling": "CONVERT_TO_TEXT",
                			"RequestParameters": {
                			  "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'"
                			},
                			"RequestTemplates": {
                			  "application/json": "Action=SendMessage&MessageBody=$util.base64Decode($input.body)&MessageAttribute.1.Name=action&MessageAttribute.1.Value.DataType=String&MessageAttribute.1.Value.StringValue=Create&MessageAttribute.2.Name=entity&MessageAttribute.2.Value.DataType=String&MessageAttribute.2.Value.StringValue=Audit&MessageAttribute.3.Name=tenant&MessageAttribute.3.Value.DataType=String&MessageAttribute.3.Value.StringValue=$input.params('accept')"
                			},
                			"Type": "AWS",
                			"Uri": {
                				"Fn::Join": [
                				  "",
                				  [
                					"arn:aws:apigateway:",					
                					{
                					  "Ref": "AWS::Region"
                					},
                					":sqs:path/",
                					{
                					  "Ref": "AWS::AccountId"
                					},
                					"/",
                					{"Fn::GetAtt": ["AuditsQueue", "QueueName"]}
                				  ]
                				]
                			  }
                		  },
                		  "MethodResponses": [
                			{
                			  "ResponseModels": {
                				"application/json": "Empty"
                			  },
                			  "StatusCode": "200"
                			}
                		  ],
                		  "ResourceId": {"Ref": "ProductsResource"},
                		  "RestApiId": {"Ref": "RestApi"}
                		}		
                	}
                  },
                  "Outputs" : {
                    "DeploymentId" : {
                      "Description" : "The deployment id",
                      "Value" : {"Ref": "Deployment#{DeploymentId}"}
                    },
                    "VpcId" : {
                      "Description" : "The VPC id",
                      "Value" : {"Ref": "VPC"}
                    },
                    "SubnetAId" : {
                      "Description" : "The Subnet A id",
                      "Value" : {"Ref": "SubnetA"}
                    },
                    "SubnetBId" : {
                      "Description" : "The Subnet B id",
                      "Value" : {"Ref": "SubnetA"}
                    },
                    "SecurityGroupId" : {
                      "Description" : "The security group id",
                      "Value" : {"Ref": "InstanceSecurityGroup"}
                    },
                	"AduitsQueue": {
                		"Description": "Url of the audits queue",
                		"Value": {
                			"Ref": "AuditsQueue"
                		}
                	},
                	"AduitsQueueArn": {
                		"Description": "Arn of the audits queue",
                		"Value": {
                			"Fn::GetAtt": ["AuditsQueue", "Arn"]
                		}
                	},
                	"AduitsQueueName": {
                		"Description": "Name of the audits queue",
                		"Value": {
                			"Fn::GetAtt": ["AuditsQueue", "QueueName"]
                		}
                	}
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"ResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.Api}\"},{\"ParameterKey\":\"HealthResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.Health}\"},{\"ParameterKey\":\"MessageResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.Messaging}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"LambdaName\",\"ParameterValue\":\"#{Lambda.AuditsService}\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"v#{Octopus.Action[Upload Lambda].Package[].PackageVersion}-#{Octopus.Deployment.Id}\"},{\"ParameterKey\":\"DBUsername\",\"ParameterValue\":\"#{Database.Username}\"},{\"ParameterKey\":\"DBPassword\",\"ParameterValue\":\"#{Database.Password}\"},{\"ParameterKey\":\"Path\",\"ParameterValue\":\"audits\"},{\"ParameterKey\":\"Suffix\",\"ParameterValue\":\"-#{Octopus.Action[Upload Lambda].Package[].PackageVersion | VersionMajor}#{Octopus.Action[Get Stack Outputs].Output.PreReleaseSuffix}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"RestApi\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"},{\"ParameterKey\":\"ResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.Api}\"},{\"ParameterKey\":\"HealthResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.Health}\"},{\"ParameterKey\":\"MessageResourceId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.Messaging}\"},{\"ParameterKey\":\"LambdaS3Key\",\"ParameterValue\":\"#{Octopus.Action[Upload Lambda].Package[].PackageId}.#{Octopus.Action[Upload Lambda].Package[].PackageVersion}.zip\"},{\"ParameterKey\":\"LambdaS3Bucket\",\"ParameterValue\":\"#{Octopus.Action[Create Bucket].Output.AwsOutputs[LambdaS3Bucket]}\"},{\"ParameterKey\":\"LambdaName\",\"ParameterValue\":\"#{Lambda.AuditsService}\"},{\"ParameterKey\":\"LambdaDescription\",\"ParameterValue\":\"v#{Octopus.Action[Upload Lambda].Package[].PackageVersion}-#{Octopus.Deployment.Id}\"},{\"ParameterKey\":\"DBUsername\",\"ParameterValue\":\"#{Database.Username}\"},{\"ParameterKey\":\"DBPassword\",\"ParameterValue\":\"#{Database.Password}\"},{\"ParameterKey\":\"Path\",\"ParameterValue\":\"audits\"},{\"ParameterKey\":\"Suffix\",\"ParameterValue\":\"-#{Octopus.Action[Upload Lambda].Package[].PackageVersion | VersionMajor}#{Octopus.Action[Get Stack Outputs].Output.PreReleaseSuffix}\"}]"
            Octopus.Action.Aws.IamCapabilities = "[\"CAPABILITY_NAMED_IAM\"]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Update Stage" {

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{CloudFormation.Stage}"
            Octopus.Action.Aws.CloudFormationTemplate = <<-EOT
                {
                  "Parameters" : {
                    "EnvironmentName" : {
                      "Type" : "String",
                      "Default" : "#{Octopus.Environment.Name}"
                    },
                    "DeploymentId" : {
                      "Type" : "String",
                      "Default" : "Deployment#{DeploymentId}"
                    },
                    "ApiGatewayId" : {
                      "Type" : "String"
                    }
                  },
                  "Resources": {
                    "Stage": {
                      "Type": "AWS::ApiGateway::Stage",
                      "Properties": {
                        "DeploymentId": {"Fn::Sub": "${DeploymentId}"},
                        "RestApiId": {"Fn::Sub": "${ApiGatewayId}"},
                        "StageName": {"Fn::Sub": "${EnvironmentName}"}
                      }
                    }
                  },
                  "Outputs": {
                    "StageURL": {
                      "Description": "The url of the stage",
                      "Value": {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {"Ref": "ApiGatewayId"},
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region"
                            },
                            ".amazonaws.com/",
                            {
                              "Ref": "Stage"
                            },
                            "/"
                          ]
                        ]
                      }
                    }
                  }
                }
            EOT
            Octopus.Action.Aws.CloudFormationTemplateParameters = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"DeploymentId\",\"ParameterValue\":\"#{Octopus.Action[Deploy Lambda].Output.AwsOutputs[DeploymentId]}\"},{\"ParameterKey\":\"ApiGatewayId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"}]"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "[{\"ParameterKey\":\"EnvironmentName\",\"ParameterValue\":\"#{Octopus.Environment.Name}\"},{\"ParameterKey\":\"DeploymentId\",\"ParameterValue\":\"#{Octopus.Action[Deploy Lambda].Output.AwsOutputs[DeploymentId]}\"},{\"ParameterKey\":\"ApiGatewayId\",\"ParameterValue\":\"#{Octopus.Action[Get Stack Outputs].Output.RestApi}\"}]"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.Aws.TemplateSource = "Inline"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
        }
        worker_pool_variable = "WorkerPool"
    }
}

step "Get Stage URL" {

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                STARGE_URL=$(aws cloudformation \
                	describe-stacks \
                    --stack-name #{CloudFormation.Stage} \
                    --query "Stacks[0].Outputs[?OutputKey=='StageURL'].OutputValue" \
                    --output text)
                    
                set_octopusvariable "StageURL" ${STARGE_URL}
                
                echo "Stage URL: ${STARGE_URL}"
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "WorkerPool"

        container {
            feed = "Dockerhub"
            image = "octopusdeploy/worker-tools:3.2.0-ubuntu.18.04"
        }
    }
}

step "Check for vulnerabilities" {

    action {
        action_type = "Octopus.Script"
        is_disabled = true
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                cd audits-service-sbom
                SUCCESS=0
                for x in **/bom.xml; do 
                	docker run --rm -v "$PWD:/app" appthreat/dep-scan scan --bom "/app/$x" --type bom 2>&1
                    if [[ $? -ne 0 ]]; then
                    	SUCCESS=1
                    fi
                done
                
                set_octopusvariable "VerificationResult" $SUCCESS
                
                exit 0
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool_variable = "WorkerPool"

        packages "audits-service-sbom" {
            acquisition_location = "Server"
            feed = "Octopub"
            package_id = "com.octopus.octopub:audits-service-sbom"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "Send Notification" {
    condition = "Variable"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Action[Check for vulnerabilities].Output.VerificationResult != \"0\"}True#{/if}"
    }

    action {
        is_disabled = true
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-441"
            Octopus.Action.Template.Version = "1"
            ssn_Color = "danger"
            ssn_HookUrl = "https://hooks.slack.com/services/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"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "Open #{Octopus.Web.ServerUri}#{Octopus.Web.DeploymentLink} to review the logs."
            ssn_Title = "Vulnerabilities found in Products Service"
            ssn_Username = "Octopus Deploy"
        }
        worker_pool_variable = "WorkerPool"
    }
}