{
  "Parameters" : {
    "EnvironmentName" : {
      "Type" : "String",
      "Default" : "#{Octopus.Environment.Name}"
    },
    "RestApi" : {
      "Type" : "String"
    },
    "ResourceId" : {
      "Type" : "String"
    },
    "HealthResourceId" : {
      "Type" : "String"
    },
    "LambdaS3Key" : {
      "Type" : "String"
    },
    "LambdaS3Bucket": {
      "Type": "String"
    },
    "LambdaName": {
      "Type": "String"
    },
    "LambdaDescription": {
     	"Type": "String" 
    },
    "DBUsername": {
     	"Type": "String" 
    },
    "DBPassword": {
     	"Type": "String" 
    },
    "Path": {
     	"Type": "String" 
    },
    "ApiKey": {
    		"Type": "String" 
    }
  },
  "Resources": {
    "VPC": {
    	"Type": "AWS::EC2::VPC",
    	"Properties": {
    		"CidrBlock": "10.0.0.0/16",
    		"EnableDnsSupport": true,
    		"EnableDnsHostnames": true,
    		"InstanceTenancy": "default",
    		"Tags": [{
    			"Key": "Name",
    			"Value": "Products Microservice VPC"
			}]
		}
	},
	"InternetGateway": {
    	"Type": "AWS::EC2::InternetGateway"
	},
	"VPCGatewayAttachment": {
    	"Type": "AWS::EC2::VPCGatewayAttachment",
    	"Properties": {
    		"VpcId": {"Ref": "VPC"},
    		"InternetGatewayId": {"Ref": "InternetGateway"}
		}
	},
	"SubnetA": {
    	"Type": "AWS::EC2::Subnet",
    	"Properties": {
    		"AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]},
    		"VpcId": {"Ref": "VPC"},
    		"CidrBlock": "10.0.3.0/24",
    		"MapPublicIpOnLaunch": true
		}
	},
	"SubnetB": {
    	"Type": "AWS::EC2::Subnet",
    	"Properties": {
    		"AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]},
    		"VpcId": {"Ref": "VPC"},
    		"CidrBlock": "10.0.4.0/24",
    		"MapPublicIpOnLaunch": true
		}
	},
	"SubnetC": {
    	"Type": "AWS::EC2::Subnet",
    	"Properties": {
    		"AvailabilityZone": { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]},
    		"VpcId": {"Ref": "VPC"},
    		"CidrBlock": "10.0.5.0/24",
    		"MapPublicIpOnLaunch": true
		}
	},
	"EIP" : {
	   "Type" : "AWS::EC2::EIP",
	   "Properties" : {
		  "Domain" : "vpc"
	   }
	},
	"NAT" : {
	   "Type" : "AWS::EC2::NatGateway",
	   "Properties" : {
		  "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
		  "SubnetId" : { "Ref" : "SubnetA"}
		 }
	},
	"RouteTableInternetGateway": {
    	"Type": "AWS::EC2::RouteTable",
    	"Properties": {
    		"VpcId": {"Ref": "VPC"}
    	}
    },
	"RouteTableNat": {
    	"Type": "AWS::EC2::RouteTable",
    	"Properties": {
    		"VpcId": {"Ref": "VPC"}
    	}
    },
    "InternetRoute": {
    	"Type": "AWS::EC2::Route",
    	"DependsOn": "InternetGateway",
    	"Properties": {
    		"DestinationCidrBlock": "0.0.0.0/0",
    		"GatewayId": {"Ref": "InternetGateway"},
    		"RouteTableId": {"Ref": "RouteTableInternetGateway"}
		}
	},
	"NatRoute": {
    	"Type": "AWS::EC2::Route",
    	"DependsOn": "InternetGateway",
    	"Properties": {
    		"DestinationCidrBlock": "0.0.0.0/0",
    		"NatGatewayId": {"Ref": "NAT"},
    		"RouteTableId": {"Ref": "RouteTableNat"}
		}
	},
	"SubnetARouteTableAssociation": {
    	"Type": "AWS::EC2::SubnetRouteTableAssociation",
    	"Properties": {
    		"RouteTableId": {"Ref": "RouteTableInternetGateway"},
    		"SubnetId": {"Ref": "SubnetA"}
      }
    },
	"SubnetBRouteTableAssociation": {
    	"Type": "AWS::EC2::SubnetRouteTableAssociation",
    	"Properties": {
    		"RouteTableId": {"Ref": "RouteTableNat"},
    		"SubnetId": {"Ref": "SubnetB"}
      }
    },
	"SubnetCRouteTableAssociation": {
    	"Type": "AWS::EC2::SubnetRouteTableAssociation",
    	"Properties": {
    		"RouteTableId": {"Ref": "RouteTableNat"},
    		"SubnetId": {"Ref": "SubnetC"}
      }
    },
    "SubnetGroup": {
	  "Type" : "AWS::RDS::DBSubnetGroup",
	  "Properties" : {
		  "DBSubnetGroupName" : "productdbsg",
		  "DBSubnetGroupDescription": "Products Subnet Group",
		  "SubnetIds" : [ {"Ref": "SubnetB"}, {"Ref": "SubnetC"} ]
		}
	},
	"InstanceSecurityGroup": {
		"Type": "AWS::EC2::SecurityGroup",
		"Properties": {
			"GroupName": "Octopus Target Group",
			"GroupDescription": "RDS traffic",
			"VpcId": {"Ref": "VPC"},
			"SecurityGroupEgress": [{
				"IpProtocol": "-1",
				"CidrIp": "0.0.0.0/0"
			}]
		}
	},
	"InstanceSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": "InstanceSecurityGroup",
      "Properties": {
        "GroupId": { "Ref": "InstanceSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": { "Ref": "InstanceSecurityGroup" }
      }
    },
    "RDSCluster": {
      "Type": "AWS::RDS::DBCluster",
      "Properties": {
      	"DBSubnetGroupName": {"Ref": "SubnetGroup"},
        "MasterUsername": {"Ref": "DBUsername"},
        "MasterUserPassword": {"Ref": "DBPassword"},
        "DatabaseName": "products",
        "Engine": "aurora",
        "EngineMode": "serverless",
        "VpcSecurityGroupIds" : [{ "Ref": "InstanceSecurityGroup" }],
        "ScalingConfiguration": {
          "AutoPause": true,
          "MaxCapacity": 16,
          "MinCapacity": 2,
          "SecondsUntilAutoPause": 300
        }
      }
    },
    "AppLogGroupOne": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": { "Fn::Sub": "/aws/lambda/${EnvironmentName}-${LambdaName}" }
      }
    },
    "IamRoleLambdaOneExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"],
        "Policies": [
          {
            "PolicyName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}-policy" },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${EnvironmentName}-${LambdaName}*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}-role" }
      }
    },
    "DBMigrationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "LambdaS3Bucket"},
          "S3Key": {"Ref": "LambdaS3Key"}       
        },
        "Environment": {
          "Variables": {
          	"DATABASE_USERNAME": {"Ref": "DBUsername"},
            "DATABASE_PASSWORD": {"Ref": "DBPassword"},
            "DATABASE_HOSTNAME": {"Fn::GetAtt" : [ "RDSCluster", "Endpoint.Address" ]},
            "DATABASE_PORT": {"Fn::GetAtt" : [ "RDSCluster", "Endpoint.Port" ]},
            "LAMBDA_NAME": "DatabaseInit"
          }
        },
        "Description" : {"Ref": "LambdaDescription"},
        "FunctionName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}-InitDB" },
        "Handler": "not.used.in.provided.runtime",
        "MemorySize": 256,
        "PackageType": "Zip",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaOneExecution",
            "Arn"
          ]
        },
        "Runtime": "provided",
        "Timeout": 30,
        "VpcConfig": {
        	"SecurityGroupIds" : [ {"Ref": "InstanceSecurityGroup"} ],
			"SubnetIds" : [ {"Ref": "SubnetB"}, {"Ref": "SubnetC"} ]
        }
      },
      "DependsOn": [
        "RDSCluster"
      ]
    },
    "LambdaOne": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "LambdaS3Bucket"},
          "S3Key": {"Ref": "LambdaS3Key"}   
        },
        "Environment": {
          "Variables": {
          	"DATABASE_USERNAME": {"Ref": "DBUsername"},
            "DATABASE_PASSWORD": {"Ref": "DBPassword"},
            "DATABASE_HOSTNAME": {"Fn::GetAtt" : [ "RDSCluster", "Endpoint.Address" ]},
            "DATABASE_PORT": {"Fn::GetAtt" : [ "RDSCluster", "Endpoint.Port" ]},
            "API_KEY": {"Ref": "ApiKey"},
            "AUDIT_SERVICE": {
				"Fn::Join": [
				  "",
				  [
					"https://",
					{"Ref": "RestApi"},
					".execute-api.",
					{
					  "Ref": "AWS::Region"
					},
					".amazonaws.com/",
					{
					  "Ref": "EnvironmentName"
					}
				  ]
				]
			  }
          }
        },
        "Description" : {"Ref": "LambdaDescription"},
        "FunctionName": { "Fn::Sub": "${EnvironmentName}-${LambdaName}" },
        "Handler": "not.used.in.provided.runtime",
        "MemorySize": 128,
        "PackageType": "Zip",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaOneExecution",
            "Arn"
          ]
        },
        "Runtime": "provided",
        "Timeout": 30,
        "VpcConfig": {
        	"SecurityGroupIds" : [ {"Ref": "InstanceSecurityGroup"} ],
			"SubnetIds" : [ {"Ref": "SubnetB"}, {"Ref": "SubnetC"} ]
        }
      },
      "DependsOn": [
        "RDSCluster"
      ]
    },
    "LambdaVersion#{DeploymentId}": {
     	"Type": "AWS::Lambda::Version",
      	"Properties": {
         	 "FunctionName": {"Ref": "LambdaOne"},
          	"Description": {"Ref": "LambdaDescription"},
          "ProvisionedConcurrencyConfig": {
            "ProvisionedConcurrentExecutions": 20
          }
        }
    },
    "LambdaOnePermissions": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Ref": "LambdaVersion#{DeploymentId}"},
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {"Ref": "RestApi"},
              "/*/*"
            ]
          ]
        }
      }
    },
	"ProductsResource": {
		"Type": "AWS::ApiGateway::Resource",
		"Properties": {
			"RestApiId": {
				"Ref": "RestApi"
			},
			"ParentId": {"Ref": "ResourceId"},
			"PathPart": {"Ref": "Path"}
		}
	},
    "ProductsHealthResource": {
		"Type": "AWS::ApiGateway::Resource",
		"Properties": {
			"RestApiId": {
				"Ref": "RestApi"
			},
			"ParentId": {"Ref": "HealthResourceId"},
			"PathPart": {"Ref": "Path"}
		}
	},
    "ProductsProxyResource": {
		"Type": "AWS::ApiGateway::Resource",
		"Properties": {
			"RestApiId": {
				"Ref": "RestApi"
			},
			"ParentId": {"Ref": "ProductsResource"},
			"PathPart": "{proxy+}"
		}
	},
    "ProductsHealthProxyResource": {
		"Type": "AWS::ApiGateway::Resource",
		"Properties": {
			"RestApiId": {
				"Ref": "RestApi"
			},
			"ParentId": {"Ref": "ProductsHealthResource"},
			"PathPart": "{proxy+}"
		}
	},
    "LambdaResourceMethodOne": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {      
        "AuthorizationType": "NONE",  
        "HttpMethod": "GET",
        "Integration": {          
          "IntegrationHttpMethod": "POST",          
          "TimeoutInMillis": 20000,
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                { "Ref": "LambdaVersion#{DeploymentId}" },
                "/invocations"
              ]
            ]
          }
        },        
        "ResourceId": {
          "Ref": "ProductsResource"
        },
        "RestApiId": {"Ref": "RestApi"}
      }
    },
    "LambdaResourceCollectionOptions": {
		"Type": "AWS::ApiGateway::Method",
		"Properties": {
		  "AuthorizationType": "NONE",
		  "RestApiId": {
			"Ref": "RestApi"
		  },
		  "ResourceId": {
			"Ref": "ProductsResource"
		  },
		  "HttpMethod": "OPTIONS",
		  "Integration": {
			"IntegrationResponses": [
			  {
				"StatusCode": 200,
				"ContentHandling": "CONVERT_TO_TEXT",
				"ResponseParameters": {
				  "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
				  "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
				  "method.response.header.Access-Control-Allow-Origin": "'*'"
				},
				"ResponseTemplates": {
				  "application/json": ""
				}
			  }
			],
			"PassthroughBehavior": "WHEN_NO_MATCH",
			"RequestTemplates": {
			  "application/json": "{\"statusCode\": 200}"
			},
			"Type": "MOCK",
			"ContentHandling": "CONVERT_TO_TEXT"
		  },
		  "MethodResponses": [
			{
			  "StatusCode": 200,
			  "ResponseModels": {
				"application/json": "Empty"
			  },
			  "ResponseParameters": {
				"method.response.header.Access-Control-Allow-Headers": false,
				"method.response.header.Access-Control-Allow-Methods": false,
				"method.response.header.Access-Control-Allow-Origin": false
			  }
			}
		  ]
		}
	  },
    "LambdaResourceOptions": {
		"Type": "AWS::ApiGateway::Method",
		"Properties": {
		  "AuthorizationType": "NONE",
		  "RestApiId": {
			"Ref": "RestApi"
		  },
		  "ResourceId": {
			"Ref": "ProductsProxyResource"
		  },
		  "HttpMethod": "OPTIONS",
		  "Integration": {
			"IntegrationResponses": [
			  {
				"StatusCode": 200,
				"ContentHandling": "CONVERT_TO_TEXT",
				"ResponseParameters": {
				  "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
				  "method.response.header.Access-Control-Allow-Methods": "'GET,DELETE,PATCH,OPTIONS'",
				  "method.response.header.Access-Control-Allow-Origin": "'*'"
				},
				"ResponseTemplates": {
				  "application/json": ""
				}
			  }
			],
			"PassthroughBehavior": "WHEN_NO_MATCH",
			"RequestTemplates": {
			  "application/json": "{\"statusCode\": 200}"
			},
			"Type": "MOCK",
			"ContentHandling": "CONVERT_TO_TEXT"
		  },
		  "MethodResponses": [
			{
			  "StatusCode": 200,
			  "ResponseModels": {
				"application/json": "Empty"
			  },
			  "ResponseParameters": {
				"method.response.header.Access-Control-Allow-Headers": false,
				"method.response.header.Access-Control-Allow-Methods": false,
				"method.response.header.Access-Control-Allow-Origin": false
			  }
			}
		  ]
		}
	  },
    "LambdaResourceMethodTwo": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {      
        "AuthorizationType": "NONE",  
        "HttpMethod": "GET",
        "Integration": {          
          "IntegrationHttpMethod": "POST",          
          "TimeoutInMillis": 20000,
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                { "Ref": "LambdaVersion#{DeploymentId}" },
                "/invocations"
              ]
            ]
          }
        },        
        "ResourceId": {
          "Ref": "ProductsProxyResource"
        },
        "RestApiId": {"Ref": "RestApi"}
      }
    },    
    "LambdaResourceMethodThree": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {    
      	"ApiKeyRequired" : true,
        "AuthorizationType": "NONE",  
        "HttpMethod": "POST",
        "Integration": {          
          "IntegrationHttpMethod": "POST",          
          "TimeoutInMillis": 20000,
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                { "Ref": "LambdaVersion#{DeploymentId}" },
                "/invocations"
              ]
            ]
          }
        },        
        "ResourceId": {
          "Ref": "ProductsResource"
        },
        "RestApiId": {"Ref": "RestApi"}
      }
    },
    "LambdaResourceMethodFour": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {      
      	"ApiKeyRequired" : true,
        "AuthorizationType": "NONE",  
        "HttpMethod": "DELETE",
        "Integration": {          
          "IntegrationHttpMethod": "POST",          
          "TimeoutInMillis": 20000,
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                { "Ref": "LambdaVersion#{DeploymentId}" },
                "/invocations"
              ]
            ]
          }
        },        
        "ResourceId": {
          "Ref": "ProductsProxyResource"
        },
        "RestApiId": {"Ref": "RestApi"}
      }
    },
    "LambdaResourceMethodFive": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {      
      	"ApiKeyRequired" : true,
        "AuthorizationType": "NONE",  
        "HttpMethod": "PATCH",
        "Integration": {          
          "IntegrationHttpMethod": "POST",          
          "TimeoutInMillis": 20000,
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                { "Ref": "LambdaVersion#{DeploymentId}" },
                "/invocations"
              ]
            ]
          }
        },        
        "ResourceId": {
          "Ref": "ProductsProxyResource"
        },
        "RestApiId": {"Ref": "RestApi"}
      }
    },
    "LambdaHealthResourceMethodOne": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {      
        "AuthorizationType": "NONE",  
        "HttpMethod": "GET",
        "Integration": {          
          "IntegrationHttpMethod": "POST",          
          "TimeoutInMillis": 20000,
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                { "Ref": "LambdaVersion#{DeploymentId}" },
                "/invocations"
              ]
            ]
          }
        },        
        "ResourceId": {
          "Ref": "ProductsHealthResource"
        },
        "RestApiId": {"Ref": "RestApi"}
      }
    },
    "LambdaHealthResourceMethodTwo": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {      
        "AuthorizationType": "NONE",  
        "HttpMethod": "GET",
        "Integration": {          
          "IntegrationHttpMethod": "POST",          
          "TimeoutInMillis": 20000,
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                { "Ref": "LambdaVersion#{DeploymentId}" },
                "/invocations"
              ]
            ]
          }
        },        
        "ResourceId": {
          "Ref": "ProductsHealthProxyResource"
        },
        "RestApiId": {"Ref": "RestApi"}
      }
    },
    "Deployment#{DeploymentId}": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "RestApi"}
      },
      "DependsOn": [
        "LambdaResourceMethodOne",
        "LambdaResourceMethodTwo",
        "LambdaResourceMethodThree",
        "LambdaResourceMethodFour",
        "LambdaHealthResourceMethodOne",
        "LambdaHealthResourceMethodTwo"
      ]
    }
  },
  "Outputs" : {
    "DeploymentId" : {
      "Description" : "The deployment id",
      "Value" : {"Ref": "Deployment#{DeploymentId}"}
    },
    "VpcId" : {
      "Description" : "The VPC id",
      "Value" : {"Ref": "VPC"}
    },
    "SubnetAId" : {
      "Description" : "The Subnet A id",
      "Value" : {"Ref": "SubnetA"}
    },
    "SubnetBId" : {
      "Description" : "The Subnet B id",
      "Value" : {"Ref": "SubnetB"}
    },
	"SubnetCId" : {
      "Description" : "The Subnet C id",
      "Value" : {"Ref": "SubnetC"}
    },
    "SecurityGroupId" : {
      "Description" : "The security group id",
      "Value" : {"Ref": "InstanceSecurityGroup"}
    },
    "SubnetGroupName" : {
      "Description" : "The subnet group name",
      "Value" : {"Ref": "SubnetGroup"}
    },
    "DatbaseAddress" : {
      "Description" : "The database hostname",
      "Value" : {"Fn::GetAtt" : [ "RDSCluster", "Endpoint.Address" ]}
    },
    "DatbasePort" : {
      "Description" : "The database hostname",
      "Value" : {"Fn::GetAtt" : [ "RDSCluster", "Endpoint.Port" ]}
    }      
  }
}