name: 'GitHub Actions Backend'
inputs:
  run_number:
    description: The github run number
    required: true
  github_token:
    description: The github token
    required: true
  github_user:
    description: The github username
    required: true
  dockerhub_username:
    description: The dockerhub username
    required: true
  dockerhub_password:
    description: The github password
    required: true
  octopus_server_url:
    description: The octopus URL
    required: true
  octopus_api_token:
    description: The octopus API token
    required: true
description: Build the audit microservice
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v1

    - uses: nelonoel/branch-name@v1.0.1

    - id: setup-pack
      uses: buildpacks/github-actions/setup-pack@v4.4.0

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    - name: Install Octopus CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.1
      with:
        version: latest

    - name: Set up DotNET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.100

    - name: Install AWS Tooling
      run: dotnet tool install -g Amazon.Lambda.Tools
      shell: bash

    - name: Install Cyclone DX
      run: dotnet tool install --global CycloneDX
      shell: bash

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: 5.x

    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        additionalArguments: /overrideconfig mode=Mainline

    - name: Install Dependencies
      run: dotnet restore
      shell: bash
      working-directory: dotnet/Audit.Service

    - name: List Dependencies
      run: dotnet list package > dependencies.txt
      shell: bash
      working-directory: dotnet/Audit.Service

    - name: Collect Dependencies
      uses: actions/upload-artifact@v2
      with:
        name: Dependencies
        path: dotnet/Audit.Service/dependencies.txt

    - name: List Dependency Updates
      run: dotnet list package --outdated > dependencyUpdates.txt
      shell: bash
      working-directory: dotnet/Audit.Service

    - name: Collect Dependency Updates
      uses: actions/upload-artifact@v2
      with:
        name: Dependencies Updates
        path: dotnet/Audit.Service/dependencyUpdates.txt

    - name: Test
      run: dotnet test -l:trx || true
      shell: bash
      working-directory: dotnet

    - if: always()
      name: Report
      uses: dorny/test-reporter@v1
      with:
        name: DotNET Tests
        path: 'dotnet/Audit.Service.Tests/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: 'false'

    - name: Package
      run: dotnet lambda package --msbuild-parameters "/p:PublishReadyToRun=true --self-contained false"
      shell: bash
      working-directory: dotnet/Audit.Service

    - run: >
        mvn deploy:deploy-file
        -Dfile=bin/Release/netcoreapp3.1/Audit.Service.zip
        -DgroupId=com.octopus.octopub
        -DartifactId=audits-service
        -Dversion=0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}
        -Dpackaging=zip
        -Durl="https://${{ inputs.github_user }}:${{ inputs.github_token }}@maven.pkg.github.com/${{ github.repository }}"
      shell: bash
      working-directory: dotnet/Audit.Service

    - name: Generate SBOM
      run: dotnet CycloneDX OctoPub.sln -o .
      shell: bash
      working-directory: dotnet

    - name: Build SBOM package
      run: >
        octo pack
        --id audits-service-sbom
        --version 0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}
        --format zip
        --include **/bom.xml
      shell: bash
      working-directory: dotnet

    - run: >
        mvn deploy:deploy-file
        -Dfile=audits-service-sbom.0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}.zip
        -DgroupId=com.octopus.octopub
        -DartifactId=audits-service-sbom
        -Dversion=0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}
        -Dpackaging=zip
        -Durl="https://${{ inputs.github_user }}:${{ inputs.github_token }}@maven.pkg.github.com/${{ github.repository }}"
      shell: bash
      working-directory: dotnet

    - name: Build K8s package
      run: >
        octo pack
        --id audits-service-k8s
        --version 0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}
        --format zip
        --include k8s/**
      shell: bash
      working-directory: java/products-service

    - run: >
        ./mvnw deploy:deploy-file
        -Dfile=audits-service-k8s.0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}.zip
        -Durl="https://${{ inputs.github_user }}:${{ inputs.github_token }}@maven.pkg.github.com/${{ github.repository }}"
        -DgroupId=com.octopus.octopub
        -DartifactId=audits-service-k8s
        -Dversion=0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}
        -Dpackaging=zip
      shell: bash
      working-directory: dotnet

    - run: |
        pack build --builder paketobuildpacks/builder:full octopussamples/octopub-audits
        docker push octopussamples/octopub-audits
        docker tag octopussamples/octopub-audits:latest octopussamples/octopub-audits:0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}
        docker push octopussamples/octopub-audits:0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}
      shell: bash
      working-directory: dotnet/Audit.Service

    # Update the deployment.yaml file to trigger a GitOps deployment
    - name: Update values.yaml
      uses: fjogeleit/yaml-update-action@master
      with:
        valueFile: 'dotnet/Audit.Service/k8s/deployment.yaml'
        propertyPath: 'spec.template.spec.containers.0.image'
        value: "octopussamples/octopub-audits:0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}"
        message: "Updated image reference"
        createPR: false

    - name: Generate Octopus Deploy build information
      uses: xo-energy/action-octopus-build-information@v1.1.2
      with:
        octopus_api_key: ${{ inputs.octopus_api_token }}
        octopus_project: Audits Service
        octopus_server: ${{ inputs.octopus_server_url }}
        push_version: 0.1.${{ inputs.run_number }}${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || ''  }}
        push_package_ids: com.octopus.octopub:audits-service
        push_overwrite_mode: OverwriteExisting
        output_path: octopus
        octopus_space: "Octopub"
        octopus_environment: "Development"

    - name: Trigger deployment
      if: ${{ env.BRANCH_NAME == 'master' }}
      run: >
        octo create-release
        --project "Audits Service"
        --deployTo "Development"
        --waitForDeployment
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Octopub"
        --gitRef master
      shell: bash

    - name: Trigger deployment to security
      if: ${{ env.BRANCH_NAME == 'master' }}
      run: >
        octo deploy-release
        --project "Audits Service"
        --deployTo "Development (Security)"
        --waitForDeployment
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Octopub"
        --version=latest
      shell: bash

    - name: Trigger branch deployment
      if: ${{ env.BRANCH_NAME != 'master' }}
      run: >
        octo create-release
        --project "Audits Service Branch"
        --deployTo "Development"
        --waitForDeployment
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Octopub"
        --gitRef master
      shell: bash