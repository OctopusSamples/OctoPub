name: 'Pipeline Frontend'
inputs:
  run_number:
    required: true
  github_token:
    required: true
  github_user:
    required: true
  dockerhub_username:
    required: true
  dockerhub_password:
    required: true
  octopus_server_url:
    required: true
  octopus_api_token:
    required: true
on:
  push:
  workflow_dispatch:

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v1

    - uses: nelonoel/branch-name@v1.0.1

    - id: setup-pack
      uses: buildpacks/github-actions/setup-pack@v4.4.0

    - name: Install Octopus Deploy CLI
      uses: OctopusDeploy/install-octocli@v1
      with:
        version: 7.4.3124

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    - name: Creating a prerelease from the branch
      run: |
        PRERELEASE="${{ env.BRANCH_NAME != 'master' && format('-{0}', env.BRANCH_NAME) || '' }}"
        echo PRERELEASE=${PRERELEASE////-} >> $GITHUB_ENV
      shell: bash

    - name: Update package.json homepage for branch deployments
      if: ${{ env.BRANCH_NAME != 'master' }}
      run: echo "`jq ".homepage=\\"/${BRANCH_NAME////-}\\"" package.json`" > package.json
      shell: bash
      working-directory: js

    - name: Packages
      run: yarn install
      shell: bash
      working-directory: js

    - name: Build
      run: yarn build
      shell: bash
      working-directory: js

    - name: Install CycloneDX
      run: npm install -g @cyclonedx/bom
      shell: bash
      working-directory: js

    - name: Generate SBOM
      run: cyclonedx-bom
      shell: bash
      working-directory: js

    - name: Create zip
      run: cd build; zip -r ../octopub-frontend.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip .
      shell: bash
      working-directory: js

    - name: Create zip
      run: zip octopub-frontend-sbom.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip bom.xml
      shell: bash
      working-directory: js

    - name: List Dependencies
      run: yarn list --all > dependencies.txt
      shell: bash
      working-directory: js

    - name: Collect Dependencies
      uses: actions/upload-artifact@v2
      with:
        name: Dependencies
        path: js/dependencies.txt

    - name: List Dependency Updates
      run: yarn outdated > dependencyUpdates.txt || true
      shell: bash
      working-directory: js

    - name: Collect Dependency Updates
      uses: actions/upload-artifact@v2
      with:
        name: Dependencies Updates
        path: js/dependencyUpdates.txt

    - run: >
        mvn deploy:deploy-file
        -Dfile=octopub-frontend.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip
        -DgroupId=com.octopus.octopub
        -DartifactId=octopub-frontend
        -Dversion=0.1.${{ github.run_number }}${{ env.PRERELEASE  }}
        -Dpackaging=zip
        -Durl="https://${{ inputs.github_user }}:${{ inputs.github_token }}@maven.pkg.github.com/${{ github.repository }}"
      shell: bash
      working-directory: js

    - run: >
        mvn deploy:deploy-file
        -Dfile=octopub-frontend-sbom.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip
        -DgroupId=com.octopus.octopub
        -DartifactId=octopub-frontend-sbom
        -Dversion=0.1.${{ github.run_number }}${{ env.PRERELEASE  }}
        -Dpackaging=zip
        -Durl="https://${{ inputs.github_user }}:${{ inputs.github_token }}@maven.pkg.github.com/${{ github.repository }}"
      shell: bash
      working-directory: js

    - name: Build K8s package
      run: >
        octo pack
        --id octopub-frontend-k8s
        --version 0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        --format zip
        --include k8s/**
      shell: bash
      working-directory: js

    - run: >
        mvn deploy:deploy-file
        -Dfile=octopub-frontend-k8s.0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}.zip
        -Durl="https://${{ inputs.github_user }}:${{ inputs.github_token }}@maven.pkg.github.com/${{ github.repository }}"
        -DgroupId=com.octopus.octopub
        -DartifactId=octopub-frontend-k8s
        -Dversion=0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        -Dpackaging=zip
      shell: bash
      working-directory: js

    # See https://stackoverflow.com/questions/68770567/containerizing-angular-application-with-paketo-buildpacks-empty-reply
    # for details on building a static web hosting image.
    - run: |
        pack build octopussamples/octopub-frontend \
          --env "BP_NODE_RUN_SCRIPTS=build" \
          --env "NODE_ENV=development" \
          --env "BPE_PORT=7080" \
          --builder paketobuildpacks/builder:full \
          --buildpack paketo-buildpacks/nodejs \
          --buildpack paketo-buildpacks/nginx \
          --buildpack paketo-community/staticfile \
          --buildpack gcr.io/paketo-buildpacks/environment-variables
        docker push octopussamples/octopub-frontend
        docker tag octopussamples/octopub-frontend:latest octopussamples/octopub-frontend:0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        docker push octopussamples/octopub-frontend:0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
      shell: bash
      working-directory: js
      
    # Update the deployment.yaml file to trigger a GitOps deployment
    - name: Update values.yaml
      uses: fjogeleit/yaml-update-action@master
      with:
        valueFile: 'js/k8s/deployment.yaml'
        propertyPath: 'spec.template.spec.containers.0.image'
        value: "octopussamples/octopub-frontend:0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}"
        message: "Updated image reference"
        createPR: false

    - name: Generate Octopus Deploy build information
      uses: xo-energy/action-octopus-build-information@v1.1.2
      with:
        octopus_api_key: ${{ inputs.octopus_api_token }}
        octopus_project: Octopub Frontend
        octopus_server: ${{ inputs.octopus_server_url }}
        push_version: 0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
        push_package_ids: com.octopus.octopub:octopub-frontend
        push_overwrite_mode: OverwriteExisting
        output_path: octopus
        octopus_space: "Octopub"
        octopus_environment: "Development"

    - name: Trigger deployment Frontend
      run: >
        octo create-release
        --project "Octopub Frontend"
        --deployTo "Development"
        --waitForDeployment
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Octopub"
        --gitRef master
        --defaultPackageVersion 0.1.${{ inputs.run_number }}${{ env.PRERELEASE  }}
      shell: bash

    - name: Trigger deployment to security
      if: ${{ env.BRANCH_NAME == 'master' }}
      run: >
        octo deploy-release
        --project "Octopub Frontend"
        --deployTo "Development (Security)"
        --waitForDeployment
        --server ${{ inputs.octopus_server_url }}
        --apiKey ${{ inputs.octopus_api_token }}
        --space "Octopub"
        --version latest
      shell: bash